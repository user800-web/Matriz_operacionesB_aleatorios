using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EjemploClases01
{
    class Program
    {
        static void Main(string[] args)
        {
            int varA = -99, varB = -99, valores = -99;
            int[,] mmul = null;
            Random rnd = new Random(DateTime.Now.Millisecond);
            int[] vectorCR = new int[199];
            for (int i = 0; i < vectorCR.Length; i++)
            {
                if (i > 89 && i < 109)
                {
                    vectorCR[i] = 0;
                }
                else
                {
                    vectorCR[i] = valores;
                }
                valores++;
            }
            int[] vecB = new int[199];
            for (int i = 0; i < vecB.Length; i++)
            {
                if (i > 89 && i < 109)
                {
                    vecB[i] = 0;
                }
                else
                {
                    vecB[i] = varA;
                }
                varA++;
            }
            int[] vecC = new int[199];
            for (int i = 0; i < vecC.Length; i++)
            {
                if (i > 89 && i < 109)
                {
                    vecC[i] = 0;
                }
                else
                {
                    vecC[i] = varB;
                }
                varB++;
            }
            //int[,] m1 = new int[rnd.Next(4, 10), rnd.Next(4, 10)];
            //int[,] m2 = new int[rnd.Next(4, 10), rnd.Next(4, 10)];
            int[,] m1 = new int[4, 4];
            int[,] m2 = new int[4, 4];
            m1 = rellenaM(m1, rnd, vectorCR);
            imprime(m1);
            Console.WriteLine();
            m2 = rellenaM(m2, rnd, vecB);
            imprime(m2);
            Console.WriteLine();
            mmul = multipli(m1, m2);
            imprime(mmul);
            Console.WriteLine();
            mmul = poneR(mmul, vecC);
            imprime(mmul);
            Console.WriteLine("\nmatriz sola prueba");
            int[,] vector = new int[4, 4];
            vector[0, 0] = 89;
            vector[0, 1] = 69;
            vector[0, 2] = 9;
            vector[0, 3] = 99;
            vector[1, 0] = 99;
            vector[1, 1] = 7;
            vector[1, 2] = -99;
            vector[1, 3] = 99;
            vector[2, 0] = -56;
            vector[2, 1] = 99;
            vector[2, 2] = -99;
            vector[2, 3] = 99;
            vector[3, 0] = 79;
            vector[3, 1] = 5;
            vector[3, 2] = -9;
            vector[3, 3] = 100;
            vector = poneR(vector, vectorCR);
            imprime(vector);
            Console.ReadKey();
        }
        static int[,] rellenaM(int[,] matrix, Random rndf, int [] rangos)
        {
            int posi;
            for (int i = 0; i <= matrix.GetUpperBound(0) ; i++)
            {
                for (int j = 0; j <= matrix.GetUpperBound(1); j++)
                {
                    posi = rndf.Next(0, 199);
                    if (rangos[posi] != 0)
                    {
                        matrix[i, j] = rangos[posi];
                        rangos[posi] = 0;
                    }
                    else
                        j--;
                }
            }
            return matrix;
        }
        static int[,] multipli(int[,] mu, int[,] md)
        {
            int[,] mr = new int[mu.GetUpperBound(0)+1, md.GetUpperBound(1)+1];
            for (int i = 0; i <= mu.GetUpperBound(0); i++) //2
            {
                for (int j = 0; j <= md.GetUpperBound(1); j++) //2
                {
                    for (int k = 0; k <= mu.GetUpperBound(1); k++)//2
                    {
                        mr[i, j] += mu[i, k] * md[k, j];
                    }
                }
            }
            return mr;
        }
        static void imprime(int[,] matrizPrint)
        {
            for (int fila = 0; fila <= matrizPrint.GetUpperBound(0); fila++)
            {
                for (int columna = 0; columna <= matrizPrint.GetUpperBound(1); columna++)
                {
                    Console.Write(matrizPrint[fila, columna] + " ");
                }
                Console.WriteLine();
            }
        }
        static int[,] poneR(int[,] m_m, int[] vec)
        {
            int ini = 1, acum = 197;
            bool verfi = false;
            for (int i = 0; i <= m_m.GetUpperBound(0); i++) //2
            {
                for (int j = 0; j <= m_m.GetUpperBound(1); j++) //2
                {
                    if ((m_m[i, j] >= -99) && (m_m[i, j] <= 99)) /////PRINCIPAL
                    {
                        if (m_m[i, j] <= -10)
                        {
                            if (vec[m_m[i, j] + 99] != 0)
                                vec[m_m[i, j] + 99] = 0;
                            else
                            {
                                if ((m_m[i, j] == -99) && (vec[-99 + 99] == 0))
                                {
                                    do
                                    {
                                        if (vec[ini] != 0)
                                        {
                                            m_m[i, j] = vec[ini];
                                            vec[ini] = 0;
                                            verfi = true;
                                        }
                                        else
                                        {
                                            ini++;
                                            verfi = false;
                                        }
                                    } while (verfi != true);
                                }
                                else
                                {
                                    m_m[i, j]++;
                                    j--;
                                }
                            }
                        }
                        else
                        {
                            if ((m_m[i, j] >= -9) && (m_m[i, j] <= 9))
                            {
                                m_m[i, j] = m_m[i, j] < 0 ? -10 : 10;
                                j--;
                            }
                            else
                            {
                                if (vec[m_m[i, j] + 99] != 0)
                                {
                                    vec[m_m[i, j] + 99] = 0;
                                }
                                else
                                {
                                    if ((m_m[i, j] == 99) && (vec[99 + 99] == 0))
                                    {
                                        do
                                        {
                                            if (vec[acum] != 0)
                                            {
                                                m_m[i, j] = vec[acum];
                                                vec[acum] = 0;
                                                verfi = true;
                                            }
                                            else
                                            {
                                                acum--;
                                                verfi = false;
                                            }
                                        } while (verfi != true);
                                    }
                                    else
                                    {
                                        m_m[i, j]++;
                                        j--;
                                    }
                                }
                            }
                        }
                    } ///PRINCIPAL
                    else
                    {
                        if (m_m[i, j] < -99)
                        {
                            m_m[i, j] = -99;
                            j--;
                        }
                        else
                        {
                            m_m[i, j] = 99;
                            j--;
                        }
                    }
                }
            }
            return m_m;
        }
    }
}
